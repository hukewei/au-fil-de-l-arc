{"filter":false,"title":"server.py","tooltip":"/server.py","undoManager":{"mark":16,"position":16,"stack":[[{"group":"doc","deltas":[{"start":{"row":126,"column":26},"end":{"row":126,"column":31},"action":"remove","lines":["False"]},{"start":{"row":126,"column":26},"end":{"row":126,"column":27},"action":"insert","lines":["T"]}]}],[{"group":"doc","deltas":[{"start":{"row":126,"column":27},"end":{"row":126,"column":28},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":126,"column":28},"end":{"row":126,"column":29},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":126,"column":29},"end":{"row":126,"column":30},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":126,"column":43},"end":{"row":126,"column":44},"action":"insert","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":126,"column":44},"end":{"row":126,"column":45},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":126,"column":45},"end":{"row":126,"column":59},"action":"insert","lines":["host='0.0.0.0'"]}]}],[{"group":"doc","deltas":[{"start":{"row":126,"column":45},"end":{"row":126,"column":59},"action":"remove","lines":["host='0.0.0.0'"]}]}],[{"group":"doc","deltas":[{"start":{"row":126,"column":44},"end":{"row":126,"column":45},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":126,"column":43},"end":{"row":126,"column":44},"action":"remove","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":134,"column":54},"end":{"row":134,"column":55},"action":"insert","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":134,"column":55},"end":{"row":134,"column":56},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":134,"column":56},"end":{"row":134,"column":70},"action":"insert","lines":["host='0.0.0.0'"]}]}],[{"group":"doc","deltas":[{"start":{"row":134,"column":49},"end":{"row":134,"column":54},"action":"remove","lines":["False"]},{"start":{"row":134,"column":49},"end":{"row":134,"column":50},"action":"insert","lines":["T"]}]}],[{"group":"doc","deltas":[{"start":{"row":134,"column":50},"end":{"row":134,"column":51},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":134,"column":51},"end":{"row":134,"column":52},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":134,"column":52},"end":{"row":134,"column":53},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":145,"column":0},"action":"remove","lines":["__author__ = 'nampnq'","","","import os","import urllib","import posixpath","import sys","import importlib","import mimetypes","","from flask import Flask","from flask import render_template_string, abort, escape, render_template, redirect, make_response, send_file","","app = Flask(__name__, template_folder=os.getcwd(), static_folder=None)","","","def translate_path(path):","    \"\"\"Translate a /-separated PATH to the local filename syntax.","","    Components that mean special things to the local file system","    (e.g. drive or directory names) are ignored.  (XXX They should","    probably be diagnosed.)","","    \"\"\"","    # abandon query parameters","    path = path.split('?', 1)[0]","    path = path.split('#', 1)[0]","    path = posixpath.normpath(urllib.unquote(path))","    words = path.split('/')","    words = filter(None, words)","    path = os.getcwd()","    for word in words:","        drive, word = os.path.splitdrive(word)","        head, word = os.path.split(word)","        if word in (os.curdir, os.pardir):","            continue","        path = os.path.join(path, word)","    return path","","","def guess_type(path):","    \"\"\"Guess the type of a file.","","    Argument is a PATH (a filename).","","    Return value is a string of the form type/subtype,","    usable for a MIME Content-type header.","","    The default implementation looks the file's extension","    up in the table self.extensions_map, using application/octet-stream","    as a default; however it would be permissible (if","    slow) to look inside the data to make a better guess.","","    \"\"\"","","    base, ext = posixpath.splitext(path)","    if ext in extensions_map:","        return extensions_map[ext]","    ext = ext.lower()","    if ext in extensions_map:","        return extensions_map[ext]","    else:","        return extensions_map['']","","if not mimetypes.inited:","        mimetypes.init()  # try to read system mime.types","extensions_map = mimetypes.types_map.copy()","extensions_map.update({","    '': 'application/octet-stream',  # Default","    '.py': 'text/plain',","    '.c': 'text/plain',","    '.h': 'text/plain',","})","","","@app.route('/', defaults={'path': '/'})","@app.route('/<path:path>')","def index(path):","    path_orginal = path","    path = translate_path(path_orginal)","    if os.path.isdir(path):","        if not path_orginal.endswith('/'):","            return redirect(path_orginal+'/')","        else:","            try:","                lists = os.listdir(path)","            except os.error:","                abort(404, \"No permission to list directory\")","                return None","            lists.sort(key=lambda a: a.lower())","            lists_path = {}","            for name in lists:","                fullname = os.path.join(path, name)","                displayname = linkname = name","                # Append / for directories or @ for symbolic links","                if os.path.isdir(fullname):","                    displayname = name + \"/\"","                    linkname = name + \"/\"","                if os.path.islink(fullname):","                    displayname = name + \"@\"","                    # Note: a link to a directory displays with @ and links with /","                lists_path.update({urllib.quote(linkname): escape(displayname)})","            displaypath = escape(urllib.unquote(path_orginal))","            template = '''","            <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"><html>","            <title>Directory listing for {{displaypath}}</title>","            <body>","            <h2>Directory listing for {{displaypath}}</h2>","            <hr>","            <ul>","            {% for name in lists %}","                <li><a href=\"{{ name }}\">{{lists[name]}}</a>","            {% endfor %}","            </ul>","            <hr>","            </body>","            </html>","            '''","","            return render_template_string(template, displaypath=displaypath, lists=lists_path)","    ctype = guess_type(path)","    if ctype.startswith('text/'):","        return make_response(render_template(path_orginal),200,{'Content-Type': ctype})","    return send_file(path, mimetype=ctype)","","","def test(port=5000, debug=True, helper=None):","    if helper:","        mod = importlib.import_module(helper)","        if hasattr(mod, 'add_helpers'):","            print '[INFO] Log helper successfully.'","            mod.add_helpers(app)","","    app.jinja_env.cache = {}","    app.run(port=port, debug=debug, use_reloader=True, host='0.0.0.0')","","if __name__ == \"__main__\":","    if len(sys.argv) == 2:","        test(int(sys.argv[1]))","    elif len(sys.argv) == 3:","        test(int(sys.argv[1]), sys.argv[2].lower() == \"true\")","    elif len(sys.argv) == 4:","        test(int(sys.argv[1]), sys.argv[2].lower() == \"true\", sys.argv[3])","    else:","        test()",""]},{"start":{"row":0,"column":0},"end":{"row":41,"column":28},"action":"insert","lines":["def iterate_by_chunk(word, chunk_length):","    i = 0","    while i < len(word):","        yield word[i:i+chunk_length]","        i += chunk_length","","","def check(word, pattern, len_pattern_word, i_offset):","    \"\"\"check if the word match the pattern\"\"\"","    pattern_length = len(pattern)*len_pattern_word","    corresp = {}","    piece_to_match = word[i_offset:i_offset+pattern_length]","    for i, letter in enumerate(iterate_by_chunk(piece_to_match, len_pattern_word)):","        pattern_letter = pattern[i]","        if pattern_letter in corresp:","            if corresp[pattern_letter] != letter:","                return False,piece_to_match,{}","        else:","            corresp[pattern_letter] = letter","    return True, piece_to_match, corresp","","def find_pattern(word, pattern):","    \"\"\"","    Check if word contain a pattern such as 'aabbcc' or 'abbac' anywhere in the word","    NOTE: Each token have the same length (e.g: if len(a) = 2 then len(b) = 2","    \"\"\"","    len_pattern_word = 1","    pattern_length = len(pattern)","    while pattern_length < len(word):","        for i in range(0,len(word)-pattern_length+1):","            result, piece, corresp = check(word, pattern, len_pattern_word, i)","            if result:","                print('do match')","                print(piece, corresp)","                return True","        len_pattern_word += 1","        pattern_length = len(pattern)*len_pattern_word","    return False","","pattern = 'aabbcc' ","word = '++a-a-b-b-c-c---'","check_pattern(word, pattern)"]}]}]]},"ace":{"folds":[],"scrolltop":1434,"scrollleft":0,"selection":{"start":{"row":132,"column":0},"end":{"row":132,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":101,"state":"start","mode":"ace/mode/python"}},"timestamp":1418651414415,"hash":"edd0afdc28cded1015086f2e93acb41c2feae5b4"}